#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\noun on
02614 High-Performance Computing
\end_layout

\begin_layout Author

\noun on
Assignment 1: Matrix Multiplication
\end_layout

\begin_layout Date
Due 6th of January 2012
\end_layout

\begin_layout Section
Summary
\begin_inset Marginal
status open

\begin_layout Plain Layout
Rasmus
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this report we will implement three different matrix-matrix multiplication
 functions and evaluate the performance of the functions.
 The functions use different algorithms for multiplying the two matrices.
\end_layout

\begin_layout Section
Introduction
\begin_inset Marginal
status open

\begin_layout Plain Layout
Rasmus
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Many physical problems can be reduced to systems of linear equations, thus
 they can be solved efficiently with linear algebra.
 Matrix multiplications are very calculation intensive and therefore they
 are a good benchmark for HPC systems.
\end_layout

\begin_layout Standard
We are to implement and evaluate three different matrix-matrix multiplication
 function used in a HPC system.
 The three different implementations are:
\end_layout

\begin_layout Enumerate
A simple matrix multiplication function, with three nested loops.
\end_layout

\begin_layout Enumerate
Invoking the DGEMM function from the sun performance library.
\end_layout

\begin_layout Enumerate
A blocked matrix multiplication function, with the block size adjusted for
 the processor characteristics.
\end_layout

\begin_layout Standard
The functions are evaluated in MFLOP/s as a function of memory footprint,
 to give an idea of the efficiency and to compare.
\end_layout

\begin_layout Section
Theory
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Matrix-multiplication"

\end_inset

Matrix multiplication
\begin_inset Marginal
status open

\begin_layout Plain Layout
Rasmus
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Multiplying two matrices 
\begin_inset Formula $C=A\times B$
\end_inset

 can be done by the following simple algorithm: 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
C_{ij}=\sum_{k=1}^{p}A_{ik}\cdot B_{kj}
\]

\end_inset


\end_layout

\begin_layout Standard
This algorithm has the time complexity 
\begin_inset Formula $\mathcal{O}(n^{3})$
\end_inset

, for 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 being squared matrices.
 Whereas an matrix addition has the time complexity 
\begin_inset Formula $\mathcal{O}(n^{2})$
\end_inset

, for 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $B$
\end_inset

 being squared matrices.
\end_layout

\begin_layout Subsection
Simple_mm
\begin_inset Marginal
status open

\begin_layout Plain Layout
Rasmus
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The simple_mm function uses the algorithm described in section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Matrix-multiplication"

\end_inset

.
 This algorithm is very easy to understand, mostly because it is similar
 to the way we multiply matrices by hand.
 The simple_mm is therefore a good baseline for evaluation the performance
 of other implementation.
 An easy optimization of our simple_mm is to check whether an element in
 the current row is zero, in this case there is no need to go through all
 the elements in the corresponding column.
\end_layout

\begin_layout Standard
The simple algorithm has three nested loops, the two outer loops can be
 interchanged and the algorithm still reaches the correct result.
\end_layout

\begin_layout Subsection
Block_mm
\begin_inset Marginal
status open

\begin_layout Plain Layout
Evangelia
\end_layout

\end_inset


\end_layout

\begin_layout Standard
faster by taking data locality into account
\end_layout

\begin_layout Standard
best block size
\end_layout

\begin_layout Subsection
DGEMM_mm
\begin_inset Marginal
status open

\begin_layout Plain Layout
Rasmus
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The DGEMM function is a highly optimized matrix-matrix multiplication function
 written in FORTRAN.
 FORTRAN saves data in multidimensional arrays column-wise compared to the
 row-wise manner of C.
 Because we are writing in C our wrapper must take care of the conversion
 between the C-style and the FORTRAN-style matrices.
 A matrix constructed in C style in interpreted as the transposed in FORTRAN.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
A_{C} & = & A_{F}^{T}\nonumber \\
B_{C} & = & B_{F}^{T}\label{eq:1}\\
C_{C} & = & C_{F}^{T}\nonumber 
\end{eqnarray}

\end_inset


\end_layout

\begin_layout Standard
The FORTRAN function takes the three input arguments A, B and C.
 Transposing the output of the function to get the desired matrix implies:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
C_{F} & = & A_{F}\times B_{F}\\
C_{F}^{T} & = & (A_{F}\times B_{F})^{T}\\
C_{F}^{T} & = & B_{F}^{T}\times A_{F}^{T}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Using the equations
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:1"

\end_inset

 gives us the favorable result:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
C_{C}=B_{C}\times A_{C}
\]

\end_inset


\end_layout

\begin_layout Standard
Which means that we only need to swap the parameters of the FORTRAN function.
 When analyzing the DGEMM function we saw that number of floating point
 operations where reduced to around half compared to the simple_mm.
 Futthermore the cache misses for the DGEMM was drastically reduced compared
 to the simple_mm function, we see the cache efficiency and the reduced
 number of floating point operations as the source of the performance advantage
 of around 10 times.
\end_layout

\begin_layout Section
Experimental setup
\begin_inset Marginal
status open

\begin_layout Plain Layout
Henning
\end_layout

\end_inset


\end_layout

\begin_layout Standard
measure points/how they are generated
\end_layout

\begin_layout Standard
looping inside the mm functions
\end_layout

\begin_layout Standard
functionality of our scripts
\end_layout

\begin_layout Section
Machine description
\begin_inset Marginal
status open

\begin_layout Plain Layout
Evangelia
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Always using suncc as compiler
\end_layout

\begin_layout Standard
machine descriptions
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Machines 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="6">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Arch
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
# of CPUs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
L2 Cache
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clock
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n-62-24-9
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Linux 2.6.32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x86_64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
24
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
512kb
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.9 GHz
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Compilers
\end_layout

\begin_layout Standard
version
\begin_inset Marginal
status open

\begin_layout Plain Layout
Evangelia
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Flags
\begin_inset Marginal
status open

\begin_layout Plain Layout
Henning
\end_layout

\end_inset


\end_layout

\begin_layout Standard
xrestrict
\begin_inset Marginal
status open

\begin_layout Plain Layout
Henning
\end_layout

\end_inset


\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
block_mm block size
\begin_inset Marginal
status open

\begin_layout Plain Layout
Evangelia
\end_layout

\end_inset


\end_layout

\begin_layout Standard
loop order simple and blocked
\begin_inset Marginal
status open

\begin_layout Plain Layout
Henning
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Cache misses
\end_layout

\begin_layout Standard
Matrix sizes: 23437 for 5 iterations
\end_layout

\begin_layout Itemize
Simple:
\end_layout

\begin_deeper
\begin_layout Itemize
Time: 4.735780
\end_layout

\begin_layout Itemize
L1 D-Cache misses: 2 603 007 836
\end_layout

\begin_layout Itemize
L2 D-Cache misses: 632 119 002
\end_layout

\end_deeper
\begin_layout Itemize
Dgemm:
\end_layout

\begin_deeper
\begin_layout Itemize
Time: 0.292122 
\end_layout

\begin_layout Itemize
L1 D-Cache misses: 90 000 005
\end_layout

\begin_layout Itemize
L2 D-Cache misses: 7 100 193
\end_layout

\end_deeper
\begin_layout Subsection*
Speed
\end_layout

\begin_layout Standard
Matrix sizes: variable from 100*1..
 100*10 (for m, n and k) and 5 iterations for each size
\end_layout

\begin_layout Itemize
Simple
\end_layout

\begin_deeper
\begin_layout Itemize
FP adds total: 11 339 988 599
\end_layout

\begin_layout Itemize
FP muls total: 11 419 988 547
\end_layout

\end_deeper
\begin_layout Itemize
Dgemm
\end_layout

\begin_deeper
\begin_layout Itemize
FP adds total: 5 439 996 293
\end_layout

\begin_layout Itemize
FP muls total: 5 459 996 252
\end_layout

\end_deeper
\begin_layout Itemize
Output (total matrix size | simple_mm time in sec | dgemm_mm time in sec)
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

234 0.003333 0.000667  
\end_layout

\begin_layout Plain Layout

937 0.017997 0.002666 
\end_layout

\begin_layout Plain Layout

2109 0.072489 0.009165  
\end_layout

\begin_layout Plain Layout

3750 0.231298 0.020664  
\end_layout

\begin_layout Plain Layout

5859 0.467096 0.042327  
\end_layout

\begin_layout Plain Layout

8437 1.445114 0.067490  
\end_layout

\begin_layout Plain Layout

11484 1.103166 0.107484  
\end_layout

\begin_layout Plain Layout

15000 3.542295 0.161475  
\end_layout

\begin_layout Plain Layout

18984 3.318995 0.224966  
\end_layout

\begin_layout Plain Layout

23437 4.272018 0.308952
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Total simple: 14.4738 sec
\end_layout

\begin_layout Itemize
Total dgemm: 0.945856 sec
\end_layout

\end_deeper
\begin_layout Itemize
Simple
\end_layout

\begin_deeper
\begin_layout Itemize
Total FLOP: 22 759 977 146
\end_layout

\begin_layout Itemize
FLOP/s: 314 498 986
\end_layout

\end_deeper
\begin_layout Itemize
Dgemm
\end_layout

\begin_deeper
\begin_layout Itemize
Total FLOPS: 10 899 992 545
\end_layout

\begin_layout Itemize
FLOP/s: 2 304 789 004
\end_layout

\end_deeper
\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
We have shown the three different implementation of the matrix-matrix multiplica
tion functions, and evaluated the performance of them.
 We have shown that our implementations of the function cannot compete with
 a highly optimized library function of an HPC library.
\end_layout

\begin_layout Bibliography
\labelwidthstring References
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset


\end_layout

\begin_layout Section*
Appendix
\end_layout

\end_body
\end_document
